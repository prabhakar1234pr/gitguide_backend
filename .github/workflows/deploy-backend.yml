name: Deploy Backend to Render

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test backend imports and syntax
      env:
        # Use mock values for testing imports (real DB will be used in deployment)
        DATABASE_URL: postgresql+asyncpg://mock:mock@localhost:5432/mock
        AZURE_OPENAI_KEY: mock_key_for_testing
        AZURE_OPENAI_ENDPOINT: https://mock.openai.azure.com/
        AZURE_OPENAI_API_VERSION: 2024-04-01-preview
        AZURE_OPENAI_DEPLOYMENT_GPT_4_1: mock_deployment
        GITHUB_ACCESS_TOKEN: ghp_mock_token_for_testing
        CLERK_SECRET_KEY: sk_mock_clerk_key_for_testing
        GROQ_API_KEY: mock_groq_key
        OPENAI_API_KEY: sk-mock_openai_key
      run: |
        # Test imports and syntax (no actual DB connection needed)
        python -c "from app.api_server import app; print('‚úÖ FastAPI app imports successfully')"
        python -c "from app.database_models import Base; print('‚úÖ Database models import successfully')" 
        python -c "from agent.agent_orchestrator import GitGuideAgent; print('‚úÖ AI Agent imports successfully')"
        python -c "from app.routes.health_endpoints import router; print('‚úÖ Health endpoints import successfully')"
        python -c "from app.routes.project_endpoints import router; print('‚úÖ Project endpoints import successfully')"
        echo "‚úÖ All backend components import successfully!"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        
    - name: Wait for deployment
      run: sleep 60
      
    - name: Test deployed backend
      run: |
        # Test health endpoint
        curl -f ${{ secrets.BACKEND_URL }}/ping || exit 1
        echo "‚úÖ Backend deployment successful!"
        
        # Test API documentation
        curl -f ${{ secrets.BACKEND_URL }}/docs || echo "‚ö†Ô∏è Docs endpoint check failed (may not be critical)"
        
        # Test a few key endpoints
        curl -f ${{ secrets.BACKEND_URL }}/agent/health || echo "‚ö†Ô∏è Agent health check failed"
        curl -f ${{ secrets.BACKEND_URL }}/chat/health || echo "‚ö†Ô∏è Chat health check failed"
        
        echo "üéâ Backend deployment and health checks completed!"
